# Environment variables.
variables:
  # GitLab API token, needed to comment on the Merge Request.
  GITLAB_API_TOKEN: $GITLAB_API_TOKEN
  # AWS credentials. Required to provision resources.
  # The credentials are stored in the GitLab project's variables.
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  # Terraform sensitive variables. Required to provision resources.
  TERRAFORM_EC2_SUBNET_ID: $TERRAFORM_EC2_SUBNET_ID
  TERRAFORM_EC2_SECURITY_GROUP_ID: $TERRAFORM_EC2_SECURITY_GROUP_ID

# Stages.
# The stages are used to organize the jobs.
# They run in the order they are defined.
stages:
  - plan
  - apply

# Plan stage.
#
# This stage will run `terragrunt run-all plan` to plan all the Terraform
# configurations in the repository. It will then post a comment on the Merge
# Request whether the plan succeeded or failed.
#
# This stage will run on merge requests to the develop branch
# and to the main branch.
plan:
  stage: plan
  image: alpine/terragrunt:1.4.2
  script:
    # Run `terragrunt run-all plan` to plan all the Terraform configurations.
    - echo "[Running terragrunt run-all plan]"
    - terragrunt run-all plan --terragrunt-non-interactive
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: on_success
  after_script:
    # Download curl.
    - echo "[Downloading curl]"
    - apk add --update --no-cache curl
    # Post a comment on the Merge Request with the job result.
    - echo "[Commenting on Merge Request]"
    - |
      NEW_LINE=$'\n'
      JOB_URL="$CI_PROJECT_URL/-/jobs/$CI_JOB_ID"
      if [ "$CI_JOB_STATUS" == "success" ]; then
        BOT_MESSAGE="### :heavy_check_mark: Plano Terraform Realizado com Sucesso!${NEW_LINE}Veja os [logs do job]($JOB_URL) para saber quais recursos serão provisionados antes de levar a AGES à falência :money_with_wings:. O Merge Request agora está liberado para ser mergeado em \`$CI_MERGE_REQUEST_TARGET_BRANCH_NAME\`."
      else
        BOT_MESSAGE="### :x: O Plano Terraform Falhou!${NEW_LINE}Graças ao(à) $CI_COMMIT_AUTHOR, o plano Terraform falhou, te liga, meu! Veja os [logs do job]($JOB_URL) para saber o que houve de errado."
      fi
      curl --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --form "body=$BOT_MESSAGE" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes"

# Apply stage.
#
# This stage will run `terragrunt run-all aply` to apply all the Terraform
# configurations in the repository. This will create all the resources
# defined in the Terraform configurations.
#
# This stage will run on commits to the main branch. This means that
# the stage will run when merging a Merge Request to the main branch.
# This stage can also be triggered manually when commits are pushed to the develop branch.
apply:
  stage: apply
  image: alpine/terragrunt:1.4.2
  script:
    # Run `terragrunt run-all apply` to apply all the Terraform configurations.
    - echo "[Running terragrunt run-all apply]"
    - terragrunt run-all apply --terragrunt-non-interactive --auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
